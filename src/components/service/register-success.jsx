import html2pdf from 'html2pdf.js'
import { useRef, useState } from 'react'
import { QRCode } from 'react-qr-code'
import { useNavigate } from 'react-router-dom'
import { useService } from '../context/service_context'
import { useForm } from '../context/form_context'
import { useInsurrance } from '../context/insurrance_context'
function RegisterSuccess() {

    const { insurranceInfo } = useInsurrance()
    const { selectedService } = useService()
    const { formData } = useForm()
    const userInfo = insurranceInfo || formData

    // pdf
    const printRef = useRef()
    const [pdfUrl, setPdfUrl] = useState(null)
    const handleGeneratePdf = async () => {
        const element = printRef.current
        const opt = {
            margin: 0,
            filename: 'phieu-dang-ky.pdf',
            image: { type: 'jpeg', quality: 0.98 },
            html2canvas: { scale: 2 },
            jsPDF: { unit: 'mm', format: 'a5', orientation: 'portrait' }
        }

        // T·∫°o blob PDF
        const worker = html2pdf().set(opt).from(element);
        const pdfBlob = await worker.outputPdf('blob');
        const url = URL.createObjectURL(pdfBlob);
        setPdfUrl(url); // g√°n URL cho m√£ QR
    }

    const navigate = useNavigate()
    const handleConfirmAndReturnHome = () => {
        navigate('/')
    }

    return (
        <>
            {/* l·ªõp ph·ªß ngo√†i */}
            <div className='flex justify-center w-full  my-3 py-3'>
                <div className='bg-white rounded-lg w-[80vw] sm:w-[70vw] md:w-[60vw] lg:w-[50vw] xl:w-[40vw] 2xl:w-[30vw] flex flex-col max-h-[90vh]'>
                    {/* Header */}
                    <div className='bg-colorOne px-4 py-2 text-center text-white font-bold text-[20px] rounded-t-lg'>
                        <h3>X√°c nh·∫≠n th√¥ng tin ƒëƒÉng k√≠</h3>
                    </div>

                    {/* Scrollable content */}
                    <div ref={printRef} className='overflow-y-auto px-5 py-2 flex-1'>
                        <span className='flex justify-center items-center text-[25px] font-bold w-full mb-2'>PHI·∫æU KH√ÅM B·ªÜNH</span>
                        {[
                            ['H·ªç v√† t√™n:', 'Nguy·ªÖn VƒÉn A'],
                            ['Gi·ªõi t√≠nh:', 'Nam'],
                            ['Ng√†y sinh:', '02-10-2002'],
                            ['D·ªãch v·ª• kh√°m:', `${selectedService}`],
                            ['CCCD:', '987654321000'],
                            ['Ph√≤ng kh√°m:', 'T·∫ßng 1 - Khu B, Ph√≤ng 101 - Tai M≈©i H·ªçng'],
                            ['B√°c sƒ©:', 'B√°c sƒ© L√™ VƒÉn D'],
                            ['S·ªë phi·∫øu ƒë·ª£i:', '8'],
                            ['B·∫£o hi·ªÉm y t·∫ø:', 'C√≥'],
                            ['Ng√†y ƒëƒÉng k√≠:', '22-07-2025'],
                        ].map(([label, value], index) => (
                            <div key={index} className='py-2 flex justify-between items-center border-b-2 text-[18px]'>
                                <label>{label}</label>
                                <span className='font-medium text-center'>{value}</span>
                            </div>
                        ))}

                        {/* QR */}
                        {pdfUrl && (
                            <div className='my-4 flex flex-col items-center justify-center'>
                                <p className="text-center text-[16px] font-medium mb-2">Qu√©t m√£ QR ƒë·ªÉ t·∫£i phi·∫øu kh√°m</p>
                                <QRCode value={pdfUrl} size={128} />
                                <a href={pdfUrl} download="phieu-dang-ky.pdf" className="mt-2 text-blue-600 underline hover:text-blue-800">Ho·∫∑c b·∫•m v√†o ƒë√¢y ƒë·ªÉ t·∫£i tr·ª±c ti·∫øp</a>
                            </div>
                        )}
                    </div>

                    {/* Footer buttons */}
                    <div className='flex justify-end rounded-b-lg px-5 py-2'>
                        <button className='text-[17px] text-white font-medium px-5 py-2 rounded-xl bg-gradient-to-r from-colorOneDark to-colorOne hover:to-emerald-700 hover:from-cyan-700 ' type='button' onClick={handleConfirmAndReturnHome}>X√°c nh·∫≠n v√† v·ªÅ trang ch·ªß</button>
                        <button className='ml-5 text-[17px] text-white font-medium px-5 py-2 rounded-xl bg-gradient-to-r from-colorTwo to-colorFive hover:from-green-500 hover:to-emerald-600' type='button' onClick={handleGeneratePdf}>In phi·∫øu</button>
                    </div>
                </div>
            </div>
        </>
    )
}

// NOTE:
// Backend s·∫Ω tr·∫£ v·ªÅ m·ªôt c√°i link url c√≥ ch·ª©a m√£ ƒë·ªãnh danh, üîπ B∆∞·ªõc 1. Khi ng∆∞·ªùi d√πng ho√†n t·∫•t ƒëƒÉng k√Ω
// Backend t·∫°o ra m·ªôt uniqueId(m√£ ƒëƒÉng k√Ω).

// V√≠ d·ª•: abc123, dk - 202507201035 - abcd, UUID ho·∫∑c m√£ c√≥ ti·ªÅn t·ªë CCCD.

// üîπ B∆∞·ªõc 2. Tr·∫£ v·ªÅ link
// V√≠ d·ª•:
// {
//     "message": "ƒêƒÉng k√Ω th√†nh c√¥ng",
//         "link": "https://kiosk.example.com/ket-qua/abc123"
// }
// B·∫°n hi·ªÉn th·ªã link n√†y cho ng∆∞·ªùi d√πng ho·∫∑c t·∫°o QR code ƒë·ªÉ in / qu√©t.
//  B∆∞·ªõc 3. Trang /ket-qua/:id truy v·∫•n l·∫°i d·ªØ li·ªáu
// React (s·ª≠ d·ª•ng useParams)
// import { useParams } from 'react-router-dom';
// import { useEffect, useState } from 'react';

// function ResultPage() {
//   const { id } = useParams(); // L·∫•y 'abc123' t·ª´ URL
//   const [result, setResult] = useState(null);

//   useEffect(() => {
//     fetch(`/api/registration/${id}`)
//       .then(res => res.json())
//       .then(data => setResult(data))
//       .catch(() => alert("Kh√¥ng t√¨m th·∫•y m√£ ƒëƒÉng k√Ω!"));
//   }, [id]);

//   if (!result) return <div>ƒêang t·∫£i...</div>;

//   return (
//     <div>
//       <h1>Th√¥ng tin ƒëƒÉng k√Ω kh√°m</h1>
//       <p>H·ªç t√™n: {result.name}</p>
//       <p>Ng√†y ƒëƒÉng k√Ω: {result.date}</p>
//       {/* C√°c th√¥ng tin kh√°c */}
//     </div>
//   );
// }
export default RegisterSuccess