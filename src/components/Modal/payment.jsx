import { useLocation, useNavigate } from "react-router-dom"
import { useForm } from "../context/form_context"
import { useInsurrance } from "../context/insurrance_context"
import { useEffect, useState } from "react"
import CountdownTimer from "./countdown_timer"

function PaymentWithQR() {
    const [showButtonReturn, setShowButtonReturn] = useState(false)
    const [showTimeDown, setShowTimeDown] = useState(true)
    const [textSuccess, setTextSuccess] = useState("")
    const handleShowButtonReturn = () => {
        setShowButtonReturn(true)
    }

    const [isFailPayment, setIsFailPayment] = useState(false)

    const location = useLocation()
    const state = location.state

    const today = new Date()
    const formattedDate = today.toLocaleDateString("vi-VN", {
        day: "2-digit",
        month: "long",
        year: "numeric"
    })

    const navigate = useNavigate()
    const { clearFormData } = useForm()
    const { clearInsuranceInfo } = useInsurrance()

    const handleConfirmAndReturnHome = () => {
        clearFormData?.()
        clearInsuranceInfo?.()
        navigate('/', { replace: true })
        window.history.pushState(null, null, '/')
        window.onpopstate = () => {
            navigate('/', { replace: true }) // NgƒÉn back ƒëi·ªÅu h∆∞·ªõng v·ªÅ trang ch·ªß, replace: true l√† Thay th·∫ø trang hi·ªán t·∫°i trong l·ªãch s·ª≠ tr√¨nh duy·ªát thay v√¨ th√™m m·ªôt m·ª•c m·ªõi. 
            //         Khi b·∫°n kh√¥ng mu·ªën ng∆∞·ªùi d√πng quay l·∫°i trang c≈© (v√≠ d·ª•: form ƒë√£ submit xong).
            // Khi ƒëi·ªÅu h∆∞·ªõng sau m·ªôt h√†nh ƒë·ªông ho√†n t·∫•t nh∆∞:
            // ƒêƒÉng nh·∫≠p
            // ƒêƒÉng k√Ω th√†nh c√¥ng
            // X√°c nh·∫≠n th√¥ng tin
            // Ho√†n t·∫•t thanh to√°n, v.v
        }
    }

    useEffect(() => {
        // T·∫°o k·∫øt n·ªëi t·ªõi WebSocket backend
        // const ws = new WebSocket("ws://localhost:8000/ws/checkTransfer"); // local: 
        const ws = new WebSocket("wss://healthcare-kiosk.onrender.com/ws/checkTransfer");
        ws.onopen = () => {
            console.log("‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng");
            // G·ª≠i order_id sang backend
            ws.send(JSON.stringify({ order_id: state.order_id }));
        };
        ws.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log("üì© Nh·∫≠n t·ª´ server:", data);

            //hi·ªán tr·∫°ng th√°i thanh to√°n
            if (data.result) {
                alert("Thanh to√°n th√†nh c√¥ng!");
                setTextSuccess("B·∫°n ƒë√£ thanh to√°n th√†nh c√¥ng, vui l√≤ng tr·ªü l·∫°i trang ch·ªß !")
                setShowTimeDown(false)
                setShowButtonReturn(true)
                ws.close(); // ƒê√≥ng socket khi ƒë√£ c√≥ k·∫øt qu·∫£
            }
        };
        ws.onclose = () => {
            console.log("‚ùå WebSocket ƒë√£ ƒë√≥ng");
        };
        ws.onerror = (error) => {
            console.error("‚ö†Ô∏è L·ªói WebSocket:", error);
        };
        // cleanup khi component unmount
        return () => {
            ws.close();
        };
    }, [state.order_id]);

    const amount = Math.round(state.is_insurrance
        ? (state.price_insur * 26181)
        : (state.price * 26181));
    // VQRQADTJG7282
    // 962471907021002
    return (
        <>
            <div className="flex flex-col md:grid md:grid-cols-2 px-[7%] gap-3">
                <div>
                    <h1 className="text-center text-[20px] md:text-[25px] font-bold mb-2">M√£ QR chuy·ªÉn kho·∫£n ng√¢n h√†ng</h1>
                    <div className="w-full flex justify-center">
                        {state && (<img key={amount} className="w-60 md:w-fit h-auto" src={`https://qr.sepay.vn/img?acc=VQRQADTJG7282&bank=MBBank&amount=${amount}&des=${state.order_id}`}></img>)}
                    </div>
                    <h1 className="text-center font-bold text-[20px]">Th√¥ng tin chuy·ªÉn kho·∫£n ng√¢n h√†ng</h1>
                    <div className="grid grid-cols-2">
                        <div className="text-right mr-2 font-semibold">
                            <h3>T√™n t√†i kho·∫£n</h3>
                            <h3>S·ªë t√†i kho·∫£n</h3>
                            <h3>Ng√¢n h√†ng</h3>
                            <h3>S·ªë ti·ªÅn</h3>
                        </div>
                        <div className="text-left ml-2">
                            <div>NGUYEN NGO AN</div>
                            <div>VQRQADTJG7282</div>
                            <div>MB Bank</div>
                            <div>{state.is_insurrance ? (`${(state.price_insur * 26181).toLocaleString('vi-VN')} VNƒê`) : (`${(state.price * 26181).toLocaleString('vi-VN')} VNƒê`)}</div>
                        </div>
                    </div>
                </div>
                <div>
                    <h1 className="text-center text-[20px] md:text-[25px] font-bold mb-2">Th√¥ng tin</h1>
                    <ul className="flex flex-col justify-center mx-[5%]">
                        <li><span className="font-semibold">M√£ ƒë∆°n h√†ng:</span> {state.order_id}</li>
                        <li><span className="font-semibold">Ng√†y:</span> {formattedDate}</li>
                        <li><span className="font-semibold mr-2">T·ªïng ti·ªÅn:</span>{state.is_insurrance ? (`${(state.price_insur * 26181).toLocaleString('vi-VN')} VNƒê`) : (`${(state.price * 26181).toLocaleString('vi-VN')} VNƒê`)}</li>
                        <li><span className="font-semibold">Ph∆∞∆°ng th·ª©c thanh to√°n:</span> Chuy·ªÉn kho·∫£n ng√¢n h√†ng (Qu√©t QR)</li>
                    </ul>
                    {/* time countdown */}
                    {showTimeDown && (
                        <CountdownTimer minutes={5} onTimeout={() => {
                            alert("H·∫øt th·ªùi gian thanh to√°n!")
                            handleShowButtonReturn()
                            setTextSuccess("Thanh to√°n th·∫•t b·∫°i !, H·∫øt th·ªùi gian thanh to√°n !")
                            setIsFailPayment(true)
                            setShowTimeDown(false)
                        }} onSuccess={handleShowButtonReturn} success={showButtonReturn} />
                    )}

                    {showButtonReturn && (
                        <>
                            <h1 className={`italic ${isFailPayment ? " text-red-700 ": " text-green-700 "} text-center`}>{textSuccess}</h1>
                            <div className="flex justify-center items-center mt-2">
                                <button className=' text-[14px] md:text-[16px] lg:text-[18px] text-white font-medium px-5 py-2 rounded-xl bg-gradient-to-r from-colorOneDark to-colorOne hover:to-emerald-700 hover:from-cyan-700' onClick={handleConfirmAndReturnHome} type='button' >X√°c nh·∫≠n v√† v·ªÅ trang ch·ªß</button>
                            </div>
                        </>
                    )}
                </div>
            </div>
        </>
    )
}
export default PaymentWithQR